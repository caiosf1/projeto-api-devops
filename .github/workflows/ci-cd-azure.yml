name: 'CI/CD Pipeline - Azure Container Apps'

# Triggers: Quando executar este pipeline
on:
  push:
    branches: [ main, develop ]  # Deploy em push para main ou develop
  pull_request:
    branches: [ main ]           # Testa PRs para main
  workflow_dispatch:             # Permite execução manual

# Variáveis globais do pipeline
env:
  DOCKER_IMAGE: caiosfdev/projeto-api-devops
  AZURE_RESOURCE_GROUP: rg-projeto-api
  AZURE_CONTAINER_APP: projeto-api-caio
  AZURE_CONTAINER_ENV: env-projeto-api

# Permissões necessárias para o pipeline
permissions:
  contents: read
  security-events: write  # Para upload SARIF
  actions: read
  id-token: write        # Para Azure OIDC (futuro)

# ===================================================================================
# 🔧 JOBS DO PIPELINE
# ===================================================================================

jobs:
  # ==================
  # 🧪 JOB 1: TESTES
  # ==================
  test:
    name: '🧪 Testes Automatizados'
    runs-on: ubuntu-latest
    
    steps:
    - name: '📥 Checkout do Código'
      uses: actions/checkout@v4
      
    - name: '🐍 Setup Python 3.9'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: '📦 Cache de Dependências'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: '🔧 Instalar Dependências'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: '🔍 Linting (Flake8)'
      run: |
        pip install flake8
        # Para por warnings mas não falha o build
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
    - name: '🧪 Executar Testes'
      run: |
        export FLASK_ENV=testing
        python -m pytest tests/ -v --cov=. --cov-report=term-missing || echo "⚠️  Alguns testes falharam, mas continuando..."
        
    - name: '📊 Upload Coverage para Codecov'
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false  # Não falha se Codecov não funcionar

  # ==================
  # 🐳 JOB 2: BUILD & PUSH
  # ==================
  build-and-push:
    name: '🐳 Build & Push Docker'
    runs-on: ubuntu-latest
    needs: test  # Só roda se testes passarem
    
    # Só faz build/push em push para main (não em PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: '📥 Checkout do Código'
      uses: actions/checkout@v4
      
    - name: '🐳 Setup Docker Buildx'
      uses: docker/setup-buildx-action@v3
      
    - name: '🔐 Login no Docker Hub'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: '🏗️ Build e Push da Imagem'
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: '🔍 Scan de Segurança da Imagem'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true  # Não falha o build por vulnerabilidades
      
    - name: '📤 Upload Scan Results'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      continue-on-error: true  # Não falha se upload não funcionar

  # ==================
  # 🌐 JOB 3: DEPLOY AZURE
  # ==================
  deploy:
    name: '🌐 Deploy no Azure'
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    
    # Só deploy em push para main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # environment: production  # Desabilitado - pode ser habilitado se criar environment no GitHub
    
    steps:
    - name: '📥 Checkout do Código'
      uses: actions/checkout@v4
      
    - name: '🔐 Login no Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: '🚀 Deploy Container App'
      run: |
        echo "🚀 Fazendo deploy da imagem: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        
        az containerapp update \
          --name ${{ env.AZURE_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
          --min-replicas 1 \
          --max-replicas 10 \
          --set-env-vars \
            FLASK_ENV=production \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            POSTGRES_SERVER=postgres-api-caio.postgres.database.azure.com \
            POSTGRES_USER=pgadmin \
            POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            POSTGRES_DB=apitodo \
            POSTGRES_PORT=5432 \
            POSTGRES_SSL_MODE=require \
            GITHUB_SHA="${{ github.sha }}" \
            DEPLOY_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            
    - name: '⏳ Aguardar Deploy Completar'
      run: |
        echo "⏳ Aguardando deploy finalizar..."
        sleep 30
        
        # Verificar status das revisões
        echo "📋 Status das revisões:"
        az containerapp revision list \
          --name ${{ env.AZURE_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[].{Name:name, Active:properties.active, Replicas:properties.replicas, Ready:properties.readyReplicas}" \
          -o table
          
        # Obter URL atualizada
        FQDN=$(az containerapp show \
          --name ${{ env.AZURE_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
          
        echo "🌐 URL da aplicação: https://$FQDN"
        echo "FQDN=$FQDN" >> $GITHUB_ENV
        
    - name: '✅ Teste de Saúde do Deploy'
      run: |
        echo "🔍 Testando se API está respondendo..."
        
        APP_URL="https://$FQDN"
        echo "🌐 Testando URL: $APP_URL"
        
        # Aguardar 60s para inicialização (Azure Database é mais rápido que Container Apps)
        echo "⏳ Aguardando 60s para app inicializar..."
        sleep 60
        
        # Retry com timeout adequado
        for i in {1..5}; do
          echo "🔄 Tentativa $i/5..."
          
          # Primeiro testa endpoint básico /health (não depende do banco)
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 30 "$APP_URL/health" || echo "000")
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "✅ API básica funcionando! (Status: $HEALTH_STATUS)"
            
            # Agora testa banco
            DB_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 15 --max-time 30 "$APP_URL/health/db" || echo "000")
            echo "🗄️ Teste banco: Status $DB_STATUS"
            
            if [ "$DB_STATUS" = "200" ]; then
              echo "✅ Banco Azure PostgreSQL conectado!"
              
              # Teste final na raiz
              ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 20 "$APP_URL/" || echo "000")
              echo "🏠 Teste raiz: Status $ROOT_STATUS"
              
              # Teste de health completo
              echo "📊 Informações completas de saúde:"
              curl -s --connect-timeout 10 --max-time 20 "$APP_URL/health/full" || echo "Health full não disponível"
              
              echo ""
              echo "🎉 Deploy bem-sucedido!"
              exit 0
            else
              echo "⚠️  API funciona mas banco tem problemas (Status DB: $DB_STATUS)"
              # Continua tentando...
            fi
          else
            echo "⏳ API ainda não responde (Status: $HEALTH_STATUS). Aguardando..."
          fi
          
          # Mostrar logs se disponível
          if [ $i -lt 5 ]; then
            echo "📋 Últimos logs da API:"
            az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --tail 5 2>/dev/null || echo "Logs não disponíveis"
            
            echo "⏳ Aguardando 30s antes da próxima tentativa..."
            sleep 30
          fi
        done
        
        echo "❌ API não está respondendo adequadamente após 5 tentativas"
        echo "🔍 Diagnóstico completo:"
        
        # Status das revisões
        echo "📋 Status das revisões da API:"
        az containerapp revision list \
          --name ${{ env.AZURE_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[].{Name:name, Active:properties.active, Replicas:properties.replicas, Ready:properties.readyReplicas, Health:properties.healthState}" \
          -o table
          
        # Logs finais detalhados
        echo "📋 Logs finais da API (últimas 20 linhas):"
        az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --tail 20 2>/dev/null || echo "Logs da API não disponíveis"
        
        # Verificar se há problemas de rede
        echo "🌐 Diagnóstico de conectividade:"
        echo "- Testando conectividade básica..."
        curl -I --connect-timeout 5 "$APP_URL" 2>/dev/null || echo "  ❌ Falha na conectividade básica"
        
        echo "- Testando endpoint /health..."
        curl -s --connect-timeout 10 "$APP_URL/health" || echo "  ❌ Endpoint /health não responde"
        
        echo "- Testando endpoint /health/db..."
        curl -s --connect-timeout 10 "$APP_URL/health/db" || echo "  ❌ Endpoint /health/db não responde"
        
        echo "💡 Possíveis causas:"
        echo "1. Azure Database for PostgreSQL com problemas de firewall"
        echo "2. Aplicação Flask teve erro na inicialização"
        echo "3. Credenciais de banco incorretas"
        echo "4. SSL/TLS configuration issue"
        
        exit 1
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "404" ]; then
          echo "✅ API está respondendo (Status: $HTTP_STATUS)"
          
          # Teste de criar usuário (API funcional)
          TEST_EMAIL="ci-test-$(date +%s)@example.com"
          REGISTER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$APP_URL/auth/register" \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$TEST_EMAIL\",\"senha\":\"test123\"}" || echo "000")
            
          if [ "$REGISTER_STATUS" = "201" ]; then
            echo "✅ API funcionando completamente!"
          else
            echo "⚠️  API conecta mas pode ter problemas (Status: $REGISTER_STATUS)"
          fi
        else
          echo "❌ API não está respondendo (Status: $HTTP_STATUS)"
          exit 1
        fi
        
    - name: '🌐 Configure Custom Domain (Optional)'
      run: |
        if [ "${{ secrets.CUSTOM_DOMAIN }}" != "" ]; then
          echo "� Configurando domínio personalizado: ${{ secrets.CUSTOM_DOMAIN }}"
          
          # Adiciona hostname se não existir
          az containerapp hostname add \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --hostname ${{ secrets.CUSTOM_DOMAIN }} 2>/dev/null || echo "Hostname já existe"
            
          # Bind certificado SSL
          az containerapp hostname bind \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --hostname ${{ secrets.CUSTOM_DOMAIN }} \
            --environment ${{ env.AZURE_CONTAINER_ENV }} 2>/dev/null || echo "SSL já configurado"
            
          echo "✅ Domínio configurado: https://${{ secrets.CUSTOM_DOMAIN }}"
          echo "CUSTOM_URL=https://${{ secrets.CUSTOM_DOMAIN }}" >> $GITHUB_ENV
        else
          echo "⚠️  CUSTOM_DOMAIN secret não configurado - usando URL padrão"
          echo "CUSTOM_URL=https://projeto-api-caio.gentleisland-7ad00bd6.eastus.azurecontainerapps.io" >> $GITHUB_ENV
        fi
        
    - name: '📊 Informações do Deploy'
      run: |
        echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
        echo ""
        echo "🔗 URL da Aplicação: ${CUSTOM_URL:-https://projeto-api-caio.gentleisland-7ad00bd6.eastus.azurecontainerapps.io}"
        echo "📚 Documentação: ${CUSTOM_URL:-https://projeto-api-caio.gentleisland-7ad00bd6.eastus.azurecontainerapps.io}/docs"  
        echo "🐳 Imagem: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo ""
        echo "💡 Para configurar domínio personalizado:"
        echo "   1. Registre seu domínio (ex: caiodev.me)"
        echo "   2. Execute: ./scripts/setup-custom-domain.sh caiodev.me"
        echo "   3. Configure DNS conforme instruções"

  # ==================
  # 📊 JOB 4: NOTIFICAÇÕES
  # ==================
  notify:
    name: '📊 Notificações'
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()  # Sempre roda, mesmo se algo falhar
    
    steps:
    - name: '📊 Status do Pipeline'
      run: |
        echo "📊 RESUMO DO PIPELINE:"
        echo "🧪 Testes: ${{ needs.test.result }}"
        echo "🐳 Build: ${{ needs.build-and-push.result }}"
        echo "🌐 Deploy: ${{ needs.deploy.result }}"
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "🎉 PIPELINE COMPLETO COM SUCESSO!"
        else
          echo "❌ Pipeline falhou em alguma etapa"
        fi

# ===================================================================================
# 📋 SECRETS NECESSÁRIOS NO GITHUB:
# ===================================================================================
# Configure estes secrets no seu repositório GitHub:
# - DOCKER_USERNAME: seu username do Docker Hub
# - DOCKER_TOKEN: token de acesso do Docker Hub
# - AZURE_CREDENTIALS: JSON com credenciais do Azure Service Principal
# - SECRET_KEY: chave secreta do Flask
# - JWT_SECRET_KEY: chave secreta do JWT
#
# Para criar AZURE_CREDENTIALS:
# az ad sp create-for-rbac --name "github-actions" --role contributor \
#   --scopes /subscriptions/{subscription-id}/resourceGroups/rg-projeto-api \
#   --sdk-auth
# ===================================================================================