# ===================================================================================
# Entry Point da Aplica√ß√£o
# ===================================================================================
# Este arquivo √© o ponto de entrada para executar a aplica√ß√£o Flask.
# Ele usa a fun√ß√£o factory 'create_app()' para criar a inst√¢ncia da aplica√ß√£o.

from app import create_app, db
import os

# Determina qual configura√ß√£o usar baseado na vari√°vel de ambiente
# Padr√£o: DevelopmentConfig
config_name = os.getenv('FLASK_ENV', 'config.DevelopmentConfig')

if config_name == 'production':
    config_class = 'config.ProductionConfig'
elif config_name == 'testing':
    config_class = 'config.TestingConfig'
else:
    config_class = 'config.DevelopmentConfig'

# Cria a aplica√ß√£o usando a factory function
app = create_app(config_class)

# Este bloco de c√≥digo verifica se o script est√° sendo executado diretamente.
if __name__ == '__main__':
    # Cria um contexto de aplica√ß√£o para opera√ß√µes que precisam do contexto do Flask
    with app.app_context():
        # Cria todas as tabelas no banco de dados se ainda n√£o existirem
        # Em produ√ß√£o, use migra√ß√µes (flask db upgrade) ao inv√©s disso
        db.create_all()
        print("‚úÖ Banco de dados inicializado!")
        print("üöÄ Servidor rodando em http://0.0.0.0:5000")
        print("üìö Documenta√ß√£o Swagger dispon√≠vel em http://0.0.0.0:5000/docs")

    # Inicia o servidor de desenvolvimento do Flask.
    # host='0.0.0.0' permite acesso de qualquer IP (necess√°rio para Docker)
    # port=5000 √© a porta padr√£o
    # debug=True habilita hot-reload e mensagens de erro detalhadas
    app.run(host='0.0.0.0', port=5000, debug=True)